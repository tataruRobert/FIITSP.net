//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhotoPropsService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photos", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    public partial class Photos : object
    {
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private string PathField;
        
        private PhotoPropsService.Features[] FeaturesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PhotoPropsService.Features[] Features
        {
            get
            {
                return this.FeaturesField;
            }
            set
            {
                this.FeaturesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Features", Namespace="http://schemas.datacontract.org/2004/07/Model", IsReference=true)]
    public partial class Features : object
    {
        
        private int IdField;
        
        private PhotoPropsService.Photos PhotoField;
        
        private int PhotosIdField;
        
        private string Feature_descField;
        
        private string Feature_nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PhotoPropsService.Photos Photo
        {
            get
            {
                return this.PhotoField;
            }
            set
            {
                this.PhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotosId
        {
            get
            {
                return this.PhotosIdField;
            }
            set
            {
                this.PhotosIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Feature_desc
        {
            get
            {
                return this.Feature_descField;
            }
            set
            {
                this.Feature_descField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Feature_name
        {
            get
            {
                return this.Feature_nameField;
            }
            set
            {
                this.Feature_nameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoPropsService.IPhotosAndFeatures")]
    public interface IPhotosAndFeatures
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/AddNewPhoto", ReplyAction="http://tempuri.org/IPhotos/AddNewPhotoResponse")]
        System.Threading.Tasks.Task<bool> AddNewPhotoAsync(string path, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetDateTimeByPath", ReplyAction="http://tempuri.org/IPhotos/GetDateTimeByPathResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateTimeByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhotos", ReplyAction="http://tempuri.org/IPhotos/GetPhotosResponse")]
        System.Threading.Tasks.Task<PhotoPropsService.Photos[]> GetPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhotoPaths", ReplyAction="http://tempuri.org/IPhotos/GetPhotoPathsResponse")]
        System.Threading.Tasks.Task<string[]> GetPhotoPathsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhotoIdByPath", ReplyAction="http://tempuri.org/IPhotos/GetPhotoIdByPathResponse")]
        System.Threading.Tasks.Task<int> GetPhotoIdByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetSortedListByDate", ReplyAction="http://tempuri.org/IPhotos/GetSortedListByDateResponse")]
        System.Threading.Tasks.Task<string[]> GetSortedListByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/RemoveBtPath", ReplyAction="http://tempuri.org/IPhotos/RemoveBtPathResponse")]
        System.Threading.Tasks.Task RemoveBtPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotos/GetPhotosByFeatureName", ReplyAction="http://tempuri.org/IPhotos/GetPhotosByFeatureNameResponse")]
        System.Threading.Tasks.Task<PhotoPropsService.Photos[]> GetPhotosByFeatureNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeatures/GetFeatures", ReplyAction="http://tempuri.org/IFeatures/GetFeaturesResponse")]
        System.Threading.Tasks.Task<PhotoPropsService.Features[]> GetFeaturesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeatures/AddFeatures", ReplyAction="http://tempuri.org/IFeatures/AddFeaturesResponse")]
        System.Threading.Tasks.Task AddFeaturesAsync(System.Tuple<string, string>[] newFeatures, int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeatures/GetFeaturesByPath", ReplyAction="http://tempuri.org/IFeatures/GetFeaturesByPathResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetFeaturesByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotosAndFeatures/Message", ReplyAction="http://tempuri.org/IPhotosAndFeatures/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IPhotosAndFeaturesChannel : PhotoPropsService.IPhotosAndFeatures, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class PhotosAndFeaturesClient : System.ServiceModel.ClientBase<PhotoPropsService.IPhotosAndFeatures>, PhotoPropsService.IPhotosAndFeatures
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PhotosAndFeaturesClient(EndpointConfiguration endpointConfiguration) : 
                base(PhotosAndFeaturesClient.GetBindingForEndpoint(endpointConfiguration), PhotosAndFeaturesClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotosAndFeaturesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PhotosAndFeaturesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotosAndFeaturesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PhotosAndFeaturesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotosAndFeaturesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> AddNewPhotoAsync(string path, System.DateTime date)
        {
            return base.Channel.AddNewPhotoAsync(path, date);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateTimeByPathAsync(string path)
        {
            return base.Channel.GetDateTimeByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<PhotoPropsService.Photos[]> GetPhotosAsync()
        {
            return base.Channel.GetPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetPhotoPathsAsync()
        {
            return base.Channel.GetPhotoPathsAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetPhotoIdByPathAsync(string path)
        {
            return base.Channel.GetPhotoIdByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSortedListByDateAsync(System.DateTime date)
        {
            return base.Channel.GetSortedListByDateAsync(date);
        }
        
        public System.Threading.Tasks.Task RemoveBtPathAsync(string path)
        {
            return base.Channel.RemoveBtPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<PhotoPropsService.Photos[]> GetPhotosByFeatureNameAsync(string name)
        {
            return base.Channel.GetPhotosByFeatureNameAsync(name);
        }
        
        public System.Threading.Tasks.Task<PhotoPropsService.Features[]> GetFeaturesAsync()
        {
            return base.Channel.GetFeaturesAsync();
        }
        
        public System.Threading.Tasks.Task AddFeaturesAsync(System.Tuple<string, string>[] newFeatures, int photoId)
        {
            return base.Channel.AddFeaturesAsync(newFeatures, photoId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetFeaturesByPathAsync(string path)
        {
            return base.Channel.GetFeaturesByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync(string name)
        {
            return base.Channel.MessageAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotosAndFeatures))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPhotosAndFeatures))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhotosAndFeatures))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:4000/PhotoPropsService");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPhotosAndFeatures))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost/4020/PhotoPropsService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPhotosAndFeatures,
            
            NetTcpBinding_IPhotosAndFeatures,
        }
    }
}
